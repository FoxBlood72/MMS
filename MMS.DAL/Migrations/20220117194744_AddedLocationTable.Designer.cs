// <auto-generated />
using System;
using MMS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MMS.DAL.Migrations
{
    [DbContext(typeof(DB_Context))]
    [Migration("20220117194744_AddedLocationTable")]
    partial class AddedLocationTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MMS.ArmyCorp", b =>
                {
                    b.Property<int>("CorpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommanderId")
                        .HasColumnType("int");

                    b.Property<int>("defeates")
                        .HasColumnType("int");

                    b.Property<int?>("stateID_STATE")
                        .HasColumnType("int");

                    b.Property<int>("victories")
                        .HasColumnType("int");

                    b.HasKey("CorpId");

                    b.HasIndex("CommanderId");

                    b.HasIndex("stateID_STATE");

                    b.ToTable("Corps");
                });

            modelBuilder.Entity("MMS.ArmyCorpMission", b =>
                {
                    b.Property<int>("missionId")
                        .HasColumnType("int");

                    b.Property<int>("armycorpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("Date");

                    b.Property<int?>("isVictory")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("missionId", "armycorpId");

                    b.HasIndex("armycorpId");

                    b.ToTable("ArmyCorpMission");
                });

            modelBuilder.Entity("MMS.Conflict", b =>
                {
                    b.Property<int>("id_conflict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("start_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("id_conflict");

                    b.ToTable("Conflicts");
                });

            modelBuilder.Entity("MMS.DAL.Entities.Divizion", b =>
                {
                    b.Property<int>("DivizionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CorpId")
                        .HasColumnType("int");

                    b.Property<string>("DivizionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralID")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DivizionID");

                    b.HasIndex("CorpId");

                    b.ToTable("Divizions");
                });

            modelBuilder.Entity("MMS.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MMS.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MMS.DAL.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MMS.Garrison", b =>
                {
                    b.Property<int>("id_garrison")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MilitaryBaseIdBase")
                        .HasColumnType("int");

                    b.Property<int>("available_rooms")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("start_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("id_garrison");

                    b.HasIndex("MilitaryBaseIdBase");

                    b.ToTable("Garrisons");
                });

            modelBuilder.Entity("MMS.Leader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("First_Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Last_Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("birth_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Leaders");
                });

            modelBuilder.Entity("MMS.Location", b =>
                {
                    b.Property<int>("id_location")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("province")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_location");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MMS.MilitaryBase", b =>
                {
                    b.Property<int>("IdBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FoundDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("locationid_location")
                        .HasColumnType("int");

                    b.Property<int?>("stateID_STATE")
                        .HasColumnType("int");

                    b.HasKey("IdBase");

                    b.HasIndex("locationid_location");

                    b.HasIndex("stateID_STATE");

                    b.ToTable("Bases");
                });

            modelBuilder.Entity("MMS.MilitarySkill", b =>
                {
                    b.Property<int>("skillId")
                        .HasColumnType("int");

                    b.Property<int>("militaryId")
                        .HasColumnType("int");

                    b.Property<float>("militaryGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.HasKey("skillId", "militaryId");

                    b.HasIndex("militaryId");

                    b.ToTable("MilitarySkill");
                });

            modelBuilder.Entity("MMS.Mission", b =>
                {
                    b.Property<int>("id_mission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("end_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("start_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("id_mission");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("MMS.PersonalMilitary", b =>
                {
                    b.Property<int>("ID_PERS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DivizionID")
                        .HasColumnType("int");

                    b.Property<string>("cnp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("hire_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("lastname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("mBaseIdBase")
                        .HasColumnType("int");

                    b.Property<float>("salary")
                        .HasMaxLength(20)
                        .HasPrecision(2)
                        .HasColumnType("float(2)");

                    b.Property<string>("sex")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("ID_PERS");

                    b.HasIndex("DivizionID");

                    b.HasIndex("mBaseIdBase");

                    b.ToTable("Militaries");
                });

            modelBuilder.Entity("MMS.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SkillName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("MMS.State", b =>
                {
                    b.Property<int>("ID_STATE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id_leader")
                        .HasColumnType("int");

                    b.Property<string>("legislator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("population")
                        .HasColumnType("int");

                    b.Property<int>("surface")
                        .HasColumnType("int");

                    b.HasKey("ID_STATE");

                    b.ToTable("States");
                });

            modelBuilder.Entity("MMS.StateConflict", b =>
                {
                    b.Property<int>("conflictId")
                        .HasColumnType("int");

                    b.Property<int?>("state1Id")
                        .HasColumnType("int");

                    b.Property<int?>("state2Id")
                        .HasColumnType("int");

                    b.HasKey("conflictId", "state1Id");

                    b.HasIndex("state1Id");

                    b.HasIndex("state2Id");

                    b.ToTable("StateConflict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MMS.ArmyCorp", b =>
                {
                    b.HasOne("MMS.PersonalMilitary", "Commander")
                        .WithMany()
                        .HasForeignKey("CommanderId");

                    b.HasOne("MMS.State", "state")
                        .WithMany("corps")
                        .HasForeignKey("stateID_STATE");

                    b.Navigation("Commander");

                    b.Navigation("state");
                });

            modelBuilder.Entity("MMS.ArmyCorpMission", b =>
                {
                    b.HasOne("MMS.ArmyCorp", "armyCorp")
                        .WithMany("armyCorpMissions")
                        .HasForeignKey("armycorpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.Mission", "mission")
                        .WithMany("armyCorpMissions")
                        .HasForeignKey("missionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("armyCorp");

                    b.Navigation("mission");
                });

            modelBuilder.Entity("MMS.DAL.Entities.Divizion", b =>
                {
                    b.HasOne("MMS.ArmyCorp", "Corp")
                        .WithMany("divizions")
                        .HasForeignKey("CorpId");

                    b.Navigation("Corp");
                });

            modelBuilder.Entity("MMS.DAL.Entities.UserRole", b =>
                {
                    b.HasOne("MMS.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.DAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("MMS.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.DAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MMS.Garrison", b =>
                {
                    b.HasOne("MMS.MilitaryBase", "MilitaryBase")
                        .WithMany("Garrison")
                        .HasForeignKey("MilitaryBaseIdBase");

                    b.Navigation("MilitaryBase");
                });

            modelBuilder.Entity("MMS.MilitaryBase", b =>
                {
                    b.HasOne("MMS.Location", "location")
                        .WithMany("bases")
                        .HasForeignKey("locationid_location");

                    b.HasOne("MMS.State", "state")
                        .WithMany("bases")
                        .HasForeignKey("stateID_STATE");

                    b.Navigation("location");

                    b.Navigation("state");
                });

            modelBuilder.Entity("MMS.MilitarySkill", b =>
                {
                    b.HasOne("MMS.PersonalMilitary", "military")
                        .WithMany("MilitarysSkills")
                        .HasForeignKey("militaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.Skill", "skill")
                        .WithMany("MilitarysSkills")
                        .HasForeignKey("skillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("military");

                    b.Navigation("skill");
                });

            modelBuilder.Entity("MMS.PersonalMilitary", b =>
                {
                    b.HasOne("MMS.DAL.Entities.Divizion", "divizion")
                        .WithMany("personalMilitaries")
                        .HasForeignKey("DivizionID");

                    b.HasOne("MMS.MilitaryBase", "mBase")
                        .WithMany("personalMilitaries")
                        .HasForeignKey("mBaseIdBase");

                    b.Navigation("divizion");

                    b.Navigation("mBase");
                });

            modelBuilder.Entity("MMS.StateConflict", b =>
                {
                    b.HasOne("MMS.Conflict", "conflict")
                        .WithMany("stateConflicts")
                        .HasForeignKey("conflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.State", "state1")
                        .WithMany("state1Conflicts")
                        .HasForeignKey("state1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMS.State", "state2")
                        .WithMany("state2Conflicts")
                        .HasForeignKey("state2Id");

                    b.Navigation("conflict");

                    b.Navigation("state1");

                    b.Navigation("state2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MMS.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MMS.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MMS.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MMS.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMS.ArmyCorp", b =>
                {
                    b.Navigation("armyCorpMissions");

                    b.Navigation("divizions");
                });

            modelBuilder.Entity("MMS.Conflict", b =>
                {
                    b.Navigation("stateConflicts");
                });

            modelBuilder.Entity("MMS.DAL.Entities.Divizion", b =>
                {
                    b.Navigation("personalMilitaries");
                });

            modelBuilder.Entity("MMS.DAL.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MMS.DAL.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MMS.Location", b =>
                {
                    b.Navigation("bases");
                });

            modelBuilder.Entity("MMS.MilitaryBase", b =>
                {
                    b.Navigation("Garrison");

                    b.Navigation("personalMilitaries");
                });

            modelBuilder.Entity("MMS.Mission", b =>
                {
                    b.Navigation("armyCorpMissions");
                });

            modelBuilder.Entity("MMS.PersonalMilitary", b =>
                {
                    b.Navigation("MilitarysSkills");
                });

            modelBuilder.Entity("MMS.Skill", b =>
                {
                    b.Navigation("MilitarysSkills");
                });

            modelBuilder.Entity("MMS.State", b =>
                {
                    b.Navigation("bases");

                    b.Navigation("corps");

                    b.Navigation("state1Conflicts");

                    b.Navigation("state2Conflicts");
                });
#pragma warning restore 612, 618
        }
    }
}
